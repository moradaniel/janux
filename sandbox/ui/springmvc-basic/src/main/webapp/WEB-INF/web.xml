<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.4"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
>
	<display-name>SpringMVC Basic</display-name>
	<description>Minimal SpringMVC configuration</description>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			classpath:ApplicationContext.xml
			/WEB-INF/security-local.xml
		</param-value>
	</context-param>

	<!--
	 Location of the Log4J config file, for initialization and refresh checks,
	 applied by Log4jConfigListener. This file should be stored in $CATALINA_BASE/lib/classes
	 (tomcat-5.5.x) or $CATALINA_BASE/lib (tomcat-6.x) and outside of the .war archive so that it can
	 be stored and customized on a per-environment basis
	-->
	<context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:janux-springmvc/log4j.xml</param-value>
	</context-param>

	<!--
	 Interval between config file refresh checks, in milliseconds. If not
	 specified, no refresh checks will happen, which avoids starting Log4J's
	 watchdog thread.
	-->
	<context-param>
		<param-name>log4jRefreshInterval</param-name>
		<param-value>10000</param-value>
	</context-param>

	<!--
		This defines a key that can be used in the log4j file with the reference
		${webapp.janux-payment} to point to the root folder of the application
		($CATALINA_BASE/webapps); we do not use this in the log4j file, but
		when deploying multiple apps it has to be set to prevent the log4j config
		listener from failing at startup
	-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>webapp.janux-springmvc</param-value>
	</context-param>

	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	

	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>
	
	<!--
		Loads the root application context of this web app at startup,
		by default from "/WEB-INF/applicationContext.xml".
		Note that it is preferable to use ContextLoaderListener in a servlet container
		that follows the Servlet 2.4 initialization order (most Servlet 2.3 containers do).
		
		Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
		to access it anywhere in the web application, outside of the framework.
		
		The root context is the parent of all servlet-specific contexts.
		This means that its beans are automatically available in these child contexts,
		both for getBean(name) calls and (external) bean references.
	-->
	<listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
	</listener>


	<servlet>
		<servlet-name>basic</servlet-name>
		<servlet-class>
			org.springframework.web.servlet.DispatcherServlet
		</servlet-class>

		<!-- override the location of the default servlet context if desirable -->
		<!--
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				/WEB-INF/basic-servlet.xml
			</param-value>
		</init-param>
		-->

		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- 
		Per the config below, the basic servlet covers all urls. 
		An alternative configuration would be to create multiple DispatcherServlet's 
		and map them to specific context paths.
	-->
	<servlet-mapping>
		<servlet-name>basic</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

</web-app>
