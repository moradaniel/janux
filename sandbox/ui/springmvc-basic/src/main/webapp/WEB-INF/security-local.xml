<?xml version="1.0" encoding="UTF-8"?>
<b:beans 
	xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd
">
	<!-- 
		The following configuration illustrates integrating Spring Security and a Janux Security
		authentication provider; the configuration mostly uses Spring Security's auto-config defaults,
		and custom login/logout pages
	-->
	<http auto-config="true" use-expressions="true">
		<form-login login-page="/login"  default-target-url="/basic" authentication-failure-url="/login?state=failure" />
		<logout     logout-url="/logout" logout-success-url="/login?state=bye"/>
		<intercept-url pattern="/login" filters="none" />
		<intercept-url pattern="/**" access="isAuthenticated()"/>
	</http>

	<authentication-manager>
		<authentication-provider user-service-ref="januxUserDetailsService"/>
	</authentication-manager>

	<b:bean id="januxUserDetailsService" class="org.janux.bus.security.spring.JanuxUserDetailsService">
		<b:property name="accountDao" ref="accountDaoGeneric"/>
	</b:bean>


	<!--
		The configuration below shows a plain-vanilla default Spring Security configuration
	-->
	<!--
	<http auto-config="true">
		<intercept-url pattern="/**" access="ROLE_USER" />
	</http>

	<authentication-manager>
		<authentication-provider>
			<user-service>
				<user name="user1" password="password1" authorities="ROLE_USER, ROLE_ADMIN" />
				<user name="user2" password="password2" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	-->

</b:beans>
