<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/tx    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
">
	<!--
		Configuration for an abstract and concrete instance of a Hibernate Session Factory and
		corresponding transaction manager.  Assumes that a suitable data source has been configured
		elsewhere under the name 'masterDataSource'.

		Also assumes that a file containing a List bean with the specific hibernate mappings is provided
		elsewhere.  This makes it possible to re-use this file as-is.
	-->

	<bean id="hibernateSessionFactory" parent="abstractHibernateSessionFactory">
		<property name="dataSource"><ref bean="masterDataSource"/></property>
		<property name="mappingResources"><ref bean="hibernateMappings"/></property>
	</bean>

	<!--
		Defines a transaction manager for usage in business or data access objects.
		No special treatment by the context, just a bean instance available as reference
		for business objects that want to handle transactions, e.g. via TransactionTemplate.
		
		Needs a reference to the SessionFactory for which it will handle transactions.
		Can optionally take a reference to a DataSource that it should use to export the Hibernate
		transactions, to be able to share transactions with plain JDBC access code
		on the same database (using the same DataSource as the Hibernate SessionFactory).
	 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory"><ref local="hibernateSessionFactory"/></property>
		<property name="dataSource"    ><ref bean="masterDataSource"/></property>
	</bean>

	<!-- 
		A default transaction attribute advice that specifies that all methods support transactions;
		create more specific transaction attributes in individual context files as appropriate.
	-->
	<tx:advice id="txAllPropagationSupport" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- methods run in a transaction if one already exists, but they donâ€™t need to run within a transaction. --> 
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>

	<!--
		We define an abstract hibernate session factory with common useful values; in the event than
		more than one hibernate session factory must be defined, the abstract bean below can be used as
		a starting point to instantiate additional hibernate session factories.  One hibernate session
		should suffice in most applications, but you may need an additional one in the event that you
		need to connect to two different databases.
	-->
	<bean id="abstractHibernateSessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" abstract="true">
		<property name="dataSource"       ref="SET_IN_CHILD_BEAN"/>
		<property name="mappingResources" ref="SET_IN_CHILD_BEAN"/>
		<property name="hibernateProperties">
			<props>
				<!-- <prop key="hibernate.dialect">SET_IN_ApplicationContext.properties</prop> -->
				<prop key="hibernate.connection.pool_size">5</prop>
				<prop key="hibernate.statement_cache.size">100</prop>
				<prop key="hibernate.query.substitutions">yes 'Y', no 'N'</prop>
				<prop key="hibernate.use_outer_join">true</prop>
				<!-- <prop key="hibernate.cglib.use_reflection_optimizer">false</prop> -->
			</props>
		</property>

	</bean>

</beans>
