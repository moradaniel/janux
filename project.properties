# these are used to facilitate the management of dependencies between modules

janux.lib.db.version   = 0.2
janux.lib.util.version = 0.3
janux.lib.hibernate.version = 0.3.1
janux.lib.hibernate.tools.version = 0.3
janux.lib.test.version = 0.3.1

janux.api.version     = 0.4.01-SNAPSHOT
janux.bus.version     = 0.4.01-SNAPSHOT
#janux.bus.version     = 0.4.02
janux.adapt.version   = 0.4.01-SNAPSHOT
#janux.adapt.version   = 0.4.01-SNAPSHOT
janux.biz.version     = 0.4.01-SNAPSHOT
#janux.biz.version     = 0.4
janux.payment.version = 0.4.01-SNAPSHOT
janux.ui.springmvc.version = 1.2.6
janux.auth.cas.version=0.4

spring.version=3.0.5.RELEASE
spring.security.version=3.0.5.RELEASE


# Maven Remote Repositories
maven.repo.remote = http://lib.janux.org/maven1, http://repo1.maven.org/maven, http://repo2.maven.org/maven2

# multiproject:install builds and installs all the modules
maven.multiproject.includes=api/project.xml,\
	modules/*/project.xml,\
	ui/springmvc/project.xml,\
	sandbox/payment2/project.xml

# prevents compilation runs from failing due to tests causing outOfMemory conditions
maven.junit.fork=true

janux.resources.dir=${basedir}/src/resources

# used to populate a token in log4j.xml that indicates 
# the root location of the folder containing logging output
janux.log.dir=${basedir}/logs


# database setup
# these values are used to replace tokens in resources/jdbc.properties, 
# via a maven.xml goal; jdbc.properties is used to externalize database settings
# from the spring configuration files

# type of database for which we are building 
janux.db.type=mysql
#janux.db.type=postgresql

janux.db.dialect=org.hibernate.dialect.MySQLDialect
janux.db.driver=com.mysql.jdbc.Driver

# maven.xml needs to create a filesystem classpath to locate the driver and
# execute slq statements; we maintain the driver version numbers here so that we
# can keep in synch the references to the driver jars in project.xml and in maven.xml reference to the libs
janux.db.mysql.driverVersion=5.0.5
janux.db.postgresql.driverVersion=8.3-603.jdbc3


janux.db.host=localhost
janux.db.name=janux
janux.db.args=
#janux.db.args=useServerPrepStmts=false
janux.db.url=jdbc:${janux.db.type}://${janux.db.host}/${janux.db.name}?${janux.db.args}
janux.db.user=janux
janux.db.password=janux

#admin.db.user=root
#admin.db.password=

janux.db.admin.user=root
janux.db.admin.password=yourpass


# this is a path that indicates where custom templates for hibernate code generation templates are stored;
# this path is used by the optional code generation goals, and does not affect the official build process.
# this relative path assumes that the code-generation goal is called from one of the module folders
# two levels deep from the root project, and the templates folder is at the root folder
janux.hibernate.templates.dir=../../templates


## Some convenience properties to control the build's behavior

# if true, recreates the target/classes target/test-classes when running a 'clean'; 
# this is useful for some IDEs that expect the folders to exist
janux.build.onClean.recreateClassDir=false

# the log4j default dev configuration expects the directory provided by the
# property ${janux.log.dir} to exist ('${basedir}/logs' by default). This
# directory is created automatically by the build when running the unit tests,
# unless the property below is set to false
janux.build.onTest.createLogDir=true

# Conversely, you may want to delete the log folder when running 'clean'
janux.build.onClean.deleteLogDir=false
